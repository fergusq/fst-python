from pypykko.utils import PARSER_FST

text = "isonvarpaan"

isyms = PARSER_FST.split_to_symbols(text)
gold = [
    [
        (0, '@0@', 'Lexicon'),
        (0, '@0@', '\t'),
        (0, 'i', 'i'),
        (1, 's', 's'),
        (2, 'o', 'o'),
        (3, 'n', '@_EPSILON_SYMBOL_@'),
        (4, '@0@', '|'),
        (4, 'v', 'v'),
        (5, 'a', 'a'),
        (6, 'r', 'r'),
        (7, 'p', 'v'),
        (8, 'a', 'a'),
        (9, '@0@', 's'),
        (9, 'a', '@_EPSILON_SYMBOL_@'),
        (10, '@0@', '\tnoun\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '+sg'),
        (10, 'n', '+gen')
    ],
    [
        (0, '@0@', 'Lexicon|Pfx'),
        (0, '@0@', '\t'),
        (0, 'i', 'i'),
        (1, 's', 's'),
        (2, 'o', 'o'),
        (3, 'n', 'n'),
        (4, '@0@', '⁅BOUNDARY⁆'),
        (4, 'v', 'v'),
        (5, 'a', 'a'),
        (6, 'r', 'r'),
        (7, 'p', 'v'),
        (8, 'a', 'a'),
        (9, '@0@', 's'),
        (9, 'a', '@_EPSILON_SYMBOL_@'),
        (10, '@0@', '\tnoun\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '+sg'),
        (10, 'n', '+gen')
    ],
    [
        (0, '@0@', 'Guesser|Any'),
        (0, '@0@', '\t'),
        (0, 'i', 'i'),
        (1, 's', 's'),
        (2, 'o', 'o'),
        (3, 'n', 'n'),
        (4, 'v', 'v'),
        (5, 'a', 'a'),
        (6, 'r', 'r'),
        (7, 'p', 'p'),
        (8, 'a', 'a'),
        (9, 'a', '@_EPSILON_SYMBOL_@'),
        (10, '@0@', 't'),
        (10, '@0@', 'a'),
        (10, '@0@', '\tverb\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '+pres'),
        (10, 'n', '+1sg')
    ],
    [
        (0, '@0@', 'Guesser|Any'),
        (0, '@0@', '\t'),
        (0, 'i', 'I'),
        (1, 's', 's'),
        (2, 'o', 'o'),
        (3, 'n', 'n'),
        (4, 'v', 'v'),
        (5, 'a', 'a'),
        (6, 'r', 'r'),
        (7, 'p', 'p'),
        (8, 'a', 'a'),
        (9, 'a', '@_EPSILON_SYMBOL_@'),
        (10, '@0@', 't'),
        (10, '@0@', 'a'),
        (10, '@0@', '\tverb\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '+pres'),
        (10, 'n', '+1sg')
    ],
    [
        (0, '@0@', 'Guesser|Any'),
        (0, '@0@', '\t'),
        (0, 'i', 'i'),
        (1, 's', 's'),
        (2, 'o', 'o'),
        (3, 'n', 'n'),
        (4, 'v', 'v'),
        (5, 'a', 'a'),
        (6, 'r', 'r'),
        (7, 'p', 'p'),
        (8, 'a', 'a'),
        (9, '@0@', '\tnoun\t'),
        (9, '@0@', '\t'),
        (9, '@0@', '\t'),
        (9, '@0@', '+sg'),
        (9, 'a', '+ill'),
        (10, 'n', '@_EPSILON_SYMBOL_@')
    ],
    [
        (0, '@0@', 'Guesser|Any'),
        (0, '@0@', '\t'),
        (0, 'i', 'i'),
        (1, 's', 's'),
        (2, 'o', 'o'),
        (3, 'n', 'n'),
        (4, 'v', 'v'),
        (5, 'a', 'a'),
        (6, 'r', 'r'),
        (7, 'p', 'p'),
        (8, 'a', 'a'),
        (9, '@0@', 's'),
        (9, 'a', '@_EPSILON_SYMBOL_@'),
        (10, '@0@', '\tnoun\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '+sg'),
        (10, 'n', '+gen')
    ],
    [
        (0, '@0@', 'Guesser|Any'),
        (0, '@0@', '\t'),
        (0, 'i', 'i'),
        (1, 's', 's'),
        (2, 'o', 'o'),
        (3, 'n', 'n'),
        (4, 'v', 'v'),
        (5, 'a', 'a'),
        (6, 'r', 'r'),
        (7, 'p', 'p'),
        (8, 'a', 'a'),
        (9, 'a', 'a'),
        (10, '@0@', '\tnoun\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '+sg'),
        (10, 'n', '+gen')
    ],
    [
        (0, '@0@', 'Guesser|Any'),
        (0, '@0@', '\t'),
        (0, 'i', 'i'),
        (1, 's', 's'),
        (2, 'o', 'o'),
        (3, 'n', 'n'),
        (4, 'v', 'v'),
        (5, 'a', 'a'),
        (6, 'r', 'r'),
        (7, 'p', 'p'),
        (8, 'a', 'a'),
        (9, 'a', 'a'),
        (10, 'n', 'n'),
        (11, '@0@', '\tnoun\t'),
        (11, '@0@', '\t'),
        (11, '@0@', '\t'),
        (11, '@0@', '+sg'),
        (11, '@0@', '+nom')
    ],
    [
        (0, '@0@', 'Guesser|Any'),
        (0, '@0@', '\t'),
        (0, 'i', 'I'),
        (1, 's', 's'),
        (2, 'o', 'o'),
        (3, 'n', 'n'),
        (4, 'v', 'v'),
        (5, 'a', 'a'),
        (6, 'r', 'r'),
        (7, 'p', 'p'),
        (8, 'a', 'a'),
        (9, '@0@', '\tnoun\t'),
        (9, '@0@', '\t'),
        (9, '@0@', '\t'),
        (9, '@0@', '+sg'),
        (9, 'a', '+ill'),
        (10, 'n', '@_EPSILON_SYMBOL_@')
    ],
    [
        (0, '@0@', 'Guesser|Any'),
        (0, '@0@', '\t'),
        (0, 'i', 'I'),
        (1, 's', 's'),
        (2, 'o', 'o'),
        (3, 'n', 'n'),
        (4, 'v', 'v'),
        (5, 'a', 'a'),
        (6, 'r', 'r'),
        (7, 'p', 'p'),
        (8, 'a', 'a'),
        (9, '@0@', 's'),
        (9, 'a', '@_EPSILON_SYMBOL_@'),
        (10, '@0@', '\tnoun\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '+sg'),
        (10, 'n', '+gen')
    ],
    [
        (0, '@0@', 'Guesser|Any'),
        (0, '@0@', '\t'),
        (0, 'i', 'I'),
        (1, 's', 's'),
        (2, 'o', 'o'),
        (3, 'n', 'n'),
        (4, 'v', 'v'),
        (5, 'a', 'a'),
        (6, 'r', 'r'),
        (7, 'p', 'p'),
        (8, 'a', 'a'),
        (9, 'a', 'a'),
        (10, '@0@', '\tnoun\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '\t'),
        (10, '@0@', '+sg'),
        (10, 'n', '+gen')
    ],
    [
        (0, '@0@', 'Guesser|Any'),
        (0, '@0@', '\t'),
        (0, 'i', 'I'),
        (1, 's', 's'),
        (2, 'o', 'o'),
        (3, 'n', 'n'),
        (4, 'v', 'v'),
        (5, 'a', 'a'),
        (6, 'r', 'r'),
        (7, 'p', 'p'),
        (8, 'a', 'a'),
        (9, 'a', 'a'),
        (10, 'n', 'n'),
        (11, '@0@', '\tnoun\t'),
        (11, '@0@', '\t'),
        (11, '@0@', '\t'),
        (11, '@0@', '+sg'),
        (11, '@0@', '+nom')
    ]
]
sys = []

for t, weight in PARSER_FST.lookup_aligned(text):
    sys.append([])
    t = list(t)
    for i, (top, bottom) in enumerate(t):
        try:
            if i == len(t)-1:
                top_sym = isyms[top].get_symbol() if top < len(isyms) else '@0@'
            else:
                top_sym = isyms[top].get_symbol() if top != t[i+1][0] else '@0@'
            row = top, top_sym, bottom.get_symbol()
        except:
            row = top, "@0@", bottom.get_symbol()
        sys[-1].append(row)
        prev = t

assert sys == gold
